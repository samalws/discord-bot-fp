intDigitConv = \d
  if (d == 0) then ("0") else
  if (d == 1) then ("1") else
  if (d == 2) then ("2") else
  if (d == 3) then ("3") else
  if (d == 4) then ("4") else
  if (d == 5) then ("5") else
  if (d == 6) then ("6") else
  if (d == 7) then ("7") else
  if (d == 8) then ("8") else ("9");

posIntConv = \n
  if (n == 0) then ("") else (posIntConv (n / 10)) + (intDigitConv (n % 10));

intConv = \n
  if (n == 0)
    then ("0")
  else if (n < 0)
    then ("-" + posIntConv (0 - n))
    else (posIntConv n);

strDigitConv = \s
  if (s == "0") then (0) else
  if (s == "1") then (1) else
  if (s == "2") then (2) else
  if (s == "3") then (3) else
  if (s == "4") then (4) else
  if (s == "5") then (5) else
  if (s == "6") then (6) else
  if (s == "7") then (7) else
  if (s == "8") then (8) else
  if (s == "9") then (9) else (neg 1);

strConv = \s
  (\sh \st
    if (sh == "-")
      then (0 - (strDigitConv st))
    else if ((len s) == 1)
      then (strDigitConv s)
      else ((strDigitConv sh) * 10) + (strConv st))
  (substr 0 1 s)
  (substr 1 (len s) s);

_strIsInt = \b \s if ((len s) == 0) then (b) else
  (\sh \st ((strDigitConv sh) != (neg 1)) & (_strIsInt true st))
  (substr 0 1 s)
  (substr 1 (len s) s);

strIsInt = \s if ((len s) == 0) then (false) else
  (\sh \st ((sh == "-") | ((strDigitConv sh) != (neg 1))) & (_strIsInt false st))
  (substr 0 1 s)
  (substr 1 (len s) s);

_factorial = \m \n if (n <= 1) then (m) else _factorial (m * n) (n - 1);
factorial = _factorial 1;

_fib = \_a \_b \n if (n <= 0) then (_b) else _fib _b (_a + _b) (n - 1);
fib = _fib 1 1;

neg = \n 0 - n;

not = \b b == false;
